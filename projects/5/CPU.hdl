// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //first mux from the scheme, output fed into A register, mux gets fed ALU output & instructions
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ARegisterIN);
    Not(in=instruction[15], out=AInstruction);
    Or(a=AInstruction, b=instruction[5], out=loadREGA);
    ARegister(in=ARegisterIN, load=loadREGA, out=ARegisterOut, out[0..14]=addressM); //a register should also output addressM
    
    //mux16 out into ALU, takes in A register output & inM signal
    //ixxaccccccdddjjj -> mux should also take in 'a' bit, as per the documentation
    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AMUXout);

    //
    And(a=instruction[15], b=instruction[4], out=loadREGD);
    DRegister(in=ALUout, load=loadREGD, out=DRegisterOut);
    
    
    //ALU takes in D register and mux out & 6 c-bits, which determine what ALU should compute
    ALU(x=DRegisterOut, y=AMUXout, zx=instruction[11],
     nx=instruction[10], zy=instruction[9],
      ny=instruction[8], f=instruction[7],
       no=instruction[6], out=ALUout, out[0..15]=outM, zr=ZRout, ng=NGout);
    
    
    //writeM -> a = gets the i-bit 
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //determine when to jump based on j-bits of instruction & ALU bits zr and ng
    Or(a=ZRout, b=NGout, out=ZRNGoutOR);
    Not(in=ZRNGoutOR, out=NOTJUMPout);
    
    And(a=instruction[2], b=NGout, out=jmp1);
    And(a=instruction[1], b=ZRout, out=jmp2);
    And(a=instruction[0], b=NOTJUMPout, out=jmp3);
    
    Or(a=jmp2, b=jmp3, out=jmp23);
    Or(a=jmp23, b=jmp1, out=ORjump);
    And(a=ORjump, b=instruction[15], out=FINALjump);
    
    
    //takes in a register output, reset signal
    //outputs 15 bit pc
    PC(in=ARegisterOut, load=FINALjump, inc=true, reset=reset, out[0..14]=pc);
    







	//get type of instruction (A/C instruction)
    /***
    Not(in=instruction[15], out=Ainstruct);
    Not(in=Ainstruct, out=Cinstruct);

    //get Cinstruct dest (a reg)
    And(a=Cinstruct, b=instruction[5], out=ALUouta);
    Mux16(a=instruction, b=ALUout, sel=ALUouta, out=AINSTout);
    
    //Cinstruct to reg a, otherwise load a & a instruct
    Or(a=Ainstruct, b=ALUouta, out=loadAINST);
    ARegister(in=AINSTout, load=loadAINST, out=aregOUT);

    Mux16(a=aregOUT, b=inM, sel=instruction[12], out=MUXAMout);
    And(a=Cinstruct, b=instruction[4], out=DREGload);
    DRegister(in=ALUout, load=DREGload, out=DREGout);

    //alu -> takes in inputs from dreg & Mux which is fed AREG output & inM
    //c- bits determine what the alu should do (“ixxaccccccdddjjj”)
    ALU(x=DREGout, y=MUXAMout, zx=instruction[11],
    nx=instruction[10], zy=instruction[9], ny=instruction[8],
    f=instruction[7], no=instruction[6],
    out=ALUout, zr=ALUZRout, ng=ALUNGout);
    
    //writeM
    And(a=Cinstruct, b=instruction[3], out=writeM);
    Or16(a=false, b=aregOUT, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    
    //determine whether to jump
    And(a=Cinstruct, b=instruction[1], out=JMPifGT);
    And(a=Cinstruct, b=instruction[2], out=JMPifEQ);
    And(a=Cinstruct, b=instruction[3], out=JMPifLT);
    Or(a=JMPifGT, b=ALUNGout, out=JMPgt);
    Or(a=JMPifEQ, b=ALUZRout, out=JMPeq);
    Or(a=JMPifLT, b=ALUNGout, out=JMPlt);
    Or(a=JMPgt, b=JMPeq, out=PCload);
    PC(in=aregOUT, load=PCload, inc=true, reset=reset, out[0..14]=pc);   
    */
}